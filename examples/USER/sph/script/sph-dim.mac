/* units of SPH simulation */
kill(all);
load("dimension.mac");
fundamental_dimensions: [mass, length, time, K];
/* density */
put(rho, mass/length^3, dimension);
put(rho_l, dimension(rho), dimension);
put(rho_g, dimension(rho), dimension);
/* volume */
put(V, dimension(mass/rho), dimension);
/* reverse volume */
put(sigma, dimension(1/V), dimension);
  
/* radious of the bubble */
put(R, length, dimension);
/* domain size */
put(L, length, dimension);
put(r, length, dimension);
/* kernel */
put(w, dimension(rho/mass), dimension);
put(dw, dimension(w/r), dimension);
put(m, mass, dimension);
put(t, time, dimension);
put(v, length/time, dimension);
/* sound speed */
put(c_l, length/time, dimension);
put(c_g, length/time, dimension);
/* temperature */
put(T, K, dimension);
put(dT, K, dimension);
/* force */
put(F, dimension(m*v/t), dimension);
/* gravity, F_g=mg */
put(g, dimension(F/m), dimension);
/* Joule */
J: dimension(m*v^2);
/* density */
/* kinematic viscosity */
put(eta_l, length^2/time, dimension);
put(eta_g, length^2/time, dimension);
/* energy of the particle, J/kg */
put(en, J/mass, dimension);
/* heat capacity, meso_cv
cv*T should give en */
put(cv, dimension(en)/K, dimension);
put(cv_l, dimension(cv), dimension);
put(cv_g, dimension(cv), dimension);
/* put(D, dimension(en*R^2/(T*t)), dimension); */

eq3: dimension(m^2/rho^2*k*dT/r*dw) = dimension(m * en/t);
sol:solve(eq3, dimension(k))[1];
put(D_l, rhs(sol), dimension);
put(D_g, rhs(sol), dimension);

eq1: dimension(en) = dimension(D*dT*dw/r/rho^2*m) * dimension(t);
/* eq2: dimension(en) = dimension(m/rho^2*D*dT*dw/r) * dimension(t);*/
sol: solve(eq1, dimension(D))[1];
/* dimension(D) = length*mass/(time^3*K) */

/* units of alpha (surface tension) */
/* eq. (27), (28) in Hu2006 */
eq1: dimension(P)=dimension(alpha_aux/r);
eq2: dimension(v/t) = dimension(1/m * dw *P/sigma^2);
sol: solve([eq1, eq2], [dimension(alpha_aux), dimension(P)])[1];
put(alpha, assoc(dimension(alpha_aux), sol), dimension);
dimension(R=sqrt(alpha/(g*rho)));

/* heat of evaporation */
put(Hwv, dimension(en), dimension);
/* check if it the same as J/kg */
is(J/mass=dimension(Hwv));

/* Jacobs number */
Ja: dT*cv_l*rho_l/(rho_g*Hwv);
is(dimension(Ja)=1);
env: [dT=0.05, cv_l=4.0, rho_l=10, rho_g=1, Hwv=32, l0=0.25, alpha=0.25, g=1.0, eta_l=5e-1];
env_water: [dT=5, cv_l=4.1855, rho_l=1000, rho_g=1, Hwv=2.260e6];
env_simple: [dT=0.85, cv_l=4.0, rho_l=100, rho_g=1, Hwv=1.0, l0=0.25, alpha=0.25, g=1.0, eta_l=5e-2];
ev(Ja, env);
ev(Ja, env_simple);
ev(Ja, env_water);

/* Eotvos number */
put(l0, length, dimension);
Eo: g*(rho_l-rho_g)*l0^2/alpha;
dimension(Eo);
ev(Eo, env);
ev(Eo, env_simple);

mu_l: eta_l*rho_l;
/* Morton number */
M: g*(rho_l-rho_g)*mu_l^4/(rho_l^2*alpha^3);
dimension(M);
ev(M, env);
ev(M, env_simple);

/* mechanical paramters */
m_env: [rho_g, rho_l, eta_g, eta_l, L, alpha, c_g, c_l];
/* thermal paramters */
t_env: [dT, cv_l, cv_g, Hwv, D_g, D_l];

dimensionless(m_env);
assume_pos: true;
ratsimp(sqrt(dimensionless(t_env)));

dimensionless(append(m_env, t_env));
length(m_env) + length(t_env);

natural_unit(alpha, [L, rho_l, eta_l, dT]);
natural_unit(cv_g, [L, rho_l, eta_l, dT]);
natural_unit(Hwv, [L, rho_l, eta_l, dT]);
natural_unit(D_g, [L, rho_l, eta_l, dT]);
natural_unit(D_l, [L, rho_l, eta_l, dT]);
natural_unit(rho_g, [L, rho_l, eta_l, dT]);